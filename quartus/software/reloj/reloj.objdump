
reloj.elf:     file format elf32-littlenios2
reloj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000b90 memsz 0x00000b90 flags r-x
    LOAD off    0x00001bb0 vaddr 0x00000bb0 paddr 0x00000cac align 2**12
         filesz 0x000000fc memsz 0x000000fc flags rw-
    LOAD off    0x00001da8 vaddr 0x00000da8 paddr 0x00000da8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001cac  2**0
                  CONTENTS
  2 .text         00000a64  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000012c  00000a84  00000a84  00001a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000fc  00000bb0  00000cac  00001bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000da8  00000da8  00001da8  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00000db8  00000db8  00001cac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000270  00000000  00000000  00001cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001f69  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e3e  00000000  00000000  00003ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000e41  00000000  00000000  00004ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002f8  00000000  00000000  00005b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c93  00000000  00000000  00005e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000f8e  00000000  00000000  00006ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00007a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  00007a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00008d2e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  00008d31  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008d38  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008d39  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00008d3a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00008d3e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00008d42  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00008d46  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  00008d4f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004909  00000000  00000000  00008d69  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004c086  00000000  00000000  0000d672  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000a84 l    d  .rodata	00000000 .rodata
00000bb0 l    d  .rwdata	00000000 .rwdata
00000da8 l    d  .bss	00000000 .bss
00000db8 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../reloj_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000c08 l     O .rwdata	00000030 AUDIO_CONFIG
00000bd8 l     O .rwdata	00000030 AUDIO
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000850 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000738 g     F .text	0000002c alt_main
00000cac g       *ABS*	00000000 __flash_rwdata_start
00000c90 g     O .rwdata	00000004 UART
0000055c g     F .text	00000070 .hidden __fixsfsi
000008c8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000db4 g     O .bss	00000004 errno
00000dac g     O .bss	00000004 alt_argv
00008c90 g       *ABS*	00000000 _gp
00000764 g     F .text	00000004 usleep
00000bb0 g     O .rwdata	00000028 notes
00000c38 g     O .rwdata	00000030 alt_fd_list
000009c8 g     F .text	00000064 .hidden __udivsi3
00000c94 g     O .rwdata	00000004 alt_max_fd
00000db8 g       *ABS*	00000000 __bss_end
00000c68 g     O .rwdata	00000028 alt_dev_null
0000084c g     F .text	00000004 alt_dcache_flush_all
00000cac g       *ABS*	00000000 __ram_rwdata_end
00000c98 g     O .rwdata	00000008 alt_dev_list
00000bb0 g       *ABS*	00000000 __ram_rodata_end
00000a2c g     F .text	00000058 .hidden __umodsi3
00000db8 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
000005cc g     F .text	00000064 .hidden __clzsi2
00000020 g     F .text	0000003c _start
00000788 g     F .text	0000003c alt_sys_init
00000630 g     F .text	00000028 .hidden __mulsi3
00000bb0 g       *ABS*	00000000 __ram_rwdata_start
00000a84 g       *ABS*	00000000 __ram_rodata_start
000007c4 g     F .text	00000088 alt_busy_sleep
00000db8 g       *ABS*	00000000 __alt_stack_base
00000858 g     F .text	0000006c alt_dev_llist_insert
00000da8 g       *ABS*	00000000 __bss_start
0000005c g     F .text	000000d0 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00000da8 g     O .bss	00000004 alt_envp
00000ca8 g     O .rwdata	00000004 alt_errno
000008d0 g     F .text	00000084 .hidden __divsi3
0000012c g     F .text	00000430 .hidden __mulsf3
00000a84 g       *ABS*	00000000 __flash_rodata_start
00000768 g     F .text	00000020 alt_irq_init
00000a84 g     O .rodata	00000100 .hidden __clz_tab
00000db0 g     O .bss	00000004 alt_argc
00000ca0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000cac g       *ABS*	00000000 _edata
00000db8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000954 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000008c4 g     F .text	00000004 alt_icache_flush_all
00000658 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a32414 	ori	gp,gp,35984
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10836a14 	ori	r2,r2,3496

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c36e14 	ori	r3,r3,3512

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00006580 	call	658 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00007380 	call	738 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <__alt_data_end+0xffff0058>

0000005c <main>:
    659.26, // E5 (Mi)
    783.99, // G5 (Sol)
    880.00  // A5 (La)
};

int main() {
  5c:	defff804 	addi	sp,sp,-32
  60:	dd000415 	stw	r20,16(sp)
  64:	dcc00315 	stw	r19,12(sp)
  68:	dc800215 	stw	r18,8(sp)
    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
        float freq = notes[n];
        for (int i = 0; i < num_samples; i++) {
            // Espera hasta que haya espacio
            do {
                fifospace = audio_ptr[REG_FIFO_SPACE];
  6c:	04c00074 	movhi	r19,1
    volatile int* audio_ptr = (int*)AUDIO_BASE;
    int fifospace;
    int num_samples = SAMPLE_RATE * DURATION_MS / 1000;

    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
        float freq = notes[n];
  70:	04800034 	movhi	r18,0
            // Generar muestra senoidal
            float sample = AMPLITUDE *  freq ;
            int isample = (int)sample;

            // Enviar a ambos canales
            audio_ptr[REG_LEFTDATA] = isample;
  74:	05000074 	movhi	r20,1
    659.26, // E5 (Mi)
    783.99, // G5 (Sol)
    880.00  // A5 (La)
};

int main() {
  78:	dc000015 	stw	r16,0(sp)
  7c:	dfc00715 	stw	ra,28(sp)
  80:	dd800615 	stw	r22,24(sp)
  84:	dd400515 	stw	r21,20(sp)
  88:	dc400115 	stw	r17,4(sp)
  8c:	0021883a 	mov	r16,zero
    volatile int* audio_ptr = (int*)AUDIO_BASE;
    int fifospace;
    int num_samples = SAMPLE_RATE * DURATION_MS / 1000;

    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
        float freq = notes[n];
  90:	9482ec04 	addi	r18,r18,2992
        for (int i = 0; i < num_samples; i++) {
            // Espera hasta que haya espacio
            do {
                fifospace = audio_ptr[REG_FIFO_SPACE];
  94:	9cc41404 	addi	r19,r19,4176
            // Generar muestra senoidal
            float sample = AMPLITUDE *  freq ;
            int isample = (int)sample;

            // Enviar a ambos canales
            audio_ptr[REG_LEFTDATA] = isample;
  98:	a5041604 	addi	r20,r20,4184
    volatile int* audio_ptr = (int*)AUDIO_BASE;
    int fifospace;
    int num_samples = SAMPLE_RATE * DURATION_MS / 1000;

    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
        float freq = notes[n];
  9c:	8485883a 	add	r2,r16,r18
  a0:	15800017 	ldw	r22,0(r2)
            float sample = AMPLITUDE *  freq ;
            int isample = (int)sample;

            // Enviar a ambos canales
            audio_ptr[REG_LEFTDATA] = isample;
            audio_ptr[REG_RIGHTDATA] = isample;
  a4:	05400074 	movhi	r21,1
    volatile int* audio_ptr = (int*)AUDIO_BASE;
    int fifospace;
    int num_samples = SAMPLE_RATE * DURATION_MS / 1000;

    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
        float freq = notes[n];
  a8:	044e1004 	movi	r17,14400
            float sample = AMPLITUDE *  freq ;
            int isample = (int)sample;

            // Enviar a ambos canales
            audio_ptr[REG_LEFTDATA] = isample;
            audio_ptr[REG_RIGHTDATA] = isample;
  ac:	ad441704 	addi	r21,r21,4188
    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
        float freq = notes[n];
        for (int i = 0; i < num_samples; i++) {
            // Espera hasta que haya espacio
            do {
                fifospace = audio_ptr[REG_FIFO_SPACE];
  b0:	98800117 	ldw	r2,4(r19)
            } while ((fifospace & 0x00FF0000) == 0 || (fifospace & 0xFF000000) == 0);
  b4:	10c03fec 	andhi	r3,r2,255
  b8:	183ffd26 	beq	r3,zero,b0 <__alt_data_end+0xffff00b0>
  bc:	10bfc02c 	andhi	r2,r2,65280
  c0:	103ffb26 	beq	r2,zero,b0 <__alt_data_end+0xffff00b0>

            // Generar muestra senoidal
            float sample = AMPLITUDE *  freq ;
            int isample = (int)sample;
  c4:	015224b4 	movhi	r5,18578
  c8:	295f0004 	addi	r5,r5,31744
  cc:	b009883a 	mov	r4,r22
  d0:	000012c0 	call	12c <__mulsf3>
  d4:	1009883a 	mov	r4,r2
  d8:	000055c0 	call	55c <__fixsfsi>

            // Enviar a ambos canales
            audio_ptr[REG_LEFTDATA] = isample;
  dc:	a0800015 	stw	r2,0(r20)
            audio_ptr[REG_RIGHTDATA] = isample;
  e0:	a8800015 	stw	r2,0(r21)
  e4:	8c7fffc4 	addi	r17,r17,-1
    int fifospace;
    int num_samples = SAMPLE_RATE * DURATION_MS / 1000;

    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
        float freq = notes[n];
        for (int i = 0; i < num_samples; i++) {
  e8:	883ff11e 	bne	r17,zero,b0 <__alt_data_end+0xffff00b0>
            audio_ptr[REG_LEFTDATA] = isample;
            audio_ptr[REG_RIGHTDATA] = isample;
        }

        // Pausa corta entre notas
        usleep(3000);
  ec:	0102ee04 	movi	r4,3000
  f0:	00007640 	call	764 <usleep>
  f4:	84000104 	addi	r16,r16,4
int main() {
    volatile int* audio_ptr = (int*)AUDIO_BASE;
    int fifospace;
    int num_samples = SAMPLE_RATE * DURATION_MS / 1000;

    for (int n = 0; n < sizeof(notes)/sizeof(notes[0]); n++) {
  f8:	00800a04 	movi	r2,40
  fc:	80bfe71e 	bne	r16,r2,9c <__alt_data_end+0xffff009c>
        // Pausa corta entre notas
        usleep(3000);
    }

    return 0;
}
 100:	0005883a 	mov	r2,zero
 104:	dfc00717 	ldw	ra,28(sp)
 108:	dd800617 	ldw	r22,24(sp)
 10c:	dd400517 	ldw	r21,20(sp)
 110:	dd000417 	ldw	r20,16(sp)
 114:	dcc00317 	ldw	r19,12(sp)
 118:	dc800217 	ldw	r18,8(sp)
 11c:	dc400117 	ldw	r17,4(sp)
 120:	dc000017 	ldw	r16,0(sp)
 124:	dec00804 	addi	sp,sp,32
 128:	f800283a 	ret

0000012c <__mulsf3>:
 12c:	defff504 	addi	sp,sp,-44
 130:	dc000115 	stw	r16,4(sp)
 134:	2020d5fa 	srli	r16,r4,23
 138:	dd400615 	stw	r21,24(sp)
 13c:	202ad7fa 	srli	r21,r4,31
 140:	dc800315 	stw	r18,12(sp)
 144:	04802034 	movhi	r18,128
 148:	df000915 	stw	fp,36(sp)
 14c:	dd000515 	stw	r20,20(sp)
 150:	94bfffc4 	addi	r18,r18,-1
 154:	dfc00a15 	stw	ra,40(sp)
 158:	ddc00815 	stw	r23,32(sp)
 15c:	dd800715 	stw	r22,28(sp)
 160:	dcc00415 	stw	r19,16(sp)
 164:	dc400215 	stw	r17,8(sp)
 168:	84003fcc 	andi	r16,r16,255
 16c:	9124703a 	and	r18,r18,r4
 170:	a829883a 	mov	r20,r21
 174:	af003fcc 	andi	fp,r21,255
 178:	80005426 	beq	r16,zero,2cc <__mulsf3+0x1a0>
 17c:	00803fc4 	movi	r2,255
 180:	80802f26 	beq	r16,r2,240 <__mulsf3+0x114>
 184:	91002034 	orhi	r4,r18,128
 188:	202490fa 	slli	r18,r4,3
 18c:	843fe044 	addi	r16,r16,-127
 190:	0023883a 	mov	r17,zero
 194:	002f883a 	mov	r23,zero
 198:	2804d5fa 	srli	r2,r5,23
 19c:	282cd7fa 	srli	r22,r5,31
 1a0:	01002034 	movhi	r4,128
 1a4:	213fffc4 	addi	r4,r4,-1
 1a8:	10803fcc 	andi	r2,r2,255
 1ac:	2166703a 	and	r19,r4,r5
 1b0:	b1803fcc 	andi	r6,r22,255
 1b4:	10004c26 	beq	r2,zero,2e8 <__mulsf3+0x1bc>
 1b8:	00c03fc4 	movi	r3,255
 1bc:	10c04726 	beq	r2,r3,2dc <__mulsf3+0x1b0>
 1c0:	99002034 	orhi	r4,r19,128
 1c4:	202690fa 	slli	r19,r4,3
 1c8:	10bfe044 	addi	r2,r2,-127
 1cc:	0007883a 	mov	r3,zero
 1d0:	80a1883a 	add	r16,r16,r2
 1d4:	010003c4 	movi	r4,15
 1d8:	1c44b03a 	or	r2,r3,r17
 1dc:	b56af03a 	xor	r21,r22,r21
 1e0:	81c00044 	addi	r7,r16,1
 1e4:	20806b36 	bltu	r4,r2,394 <__mulsf3+0x268>
 1e8:	100490ba 	slli	r2,r2,2
 1ec:	01000034 	movhi	r4,0
 1f0:	21008004 	addi	r4,r4,512
 1f4:	1105883a 	add	r2,r2,r4
 1f8:	10800017 	ldw	r2,0(r2)
 1fc:	1000683a 	jmp	r2
 200:	00000394 	movui	zero,14
 204:	00000254 	movui	zero,9
 208:	00000254 	movui	zero,9
 20c:	00000250 	cmplti	zero,zero,9
 210:	00000378 	rdprs	zero,zero,13
 214:	00000378 	rdprs	zero,zero,13
 218:	00000364 	muli	zero,zero,13
 21c:	00000250 	cmplti	zero,zero,9
 220:	00000378 	rdprs	zero,zero,13
 224:	00000364 	muli	zero,zero,13
 228:	00000378 	rdprs	zero,zero,13
 22c:	00000250 	cmplti	zero,zero,9
 230:	00000384 	movi	zero,14
 234:	00000384 	movi	zero,14
 238:	00000384 	movi	zero,14
 23c:	00000494 	movui	zero,18
 240:	90003b1e 	bne	r18,zero,330 <__mulsf3+0x204>
 244:	04400204 	movi	r17,8
 248:	05c00084 	movi	r23,2
 24c:	003fd206 	br	198 <__alt_data_end+0xffff0198>
 250:	302b883a 	mov	r21,r6
 254:	00800084 	movi	r2,2
 258:	18802626 	beq	r3,r2,2f4 <__mulsf3+0x1c8>
 25c:	008000c4 	movi	r2,3
 260:	1880b826 	beq	r3,r2,544 <__mulsf3+0x418>
 264:	00800044 	movi	r2,1
 268:	1880af1e 	bne	r3,r2,528 <__mulsf3+0x3fc>
 26c:	a829883a 	mov	r20,r21
 270:	0007883a 	mov	r3,zero
 274:	0009883a 	mov	r4,zero
 278:	18803fcc 	andi	r2,r3,255
 27c:	100695fa 	slli	r3,r2,23
 280:	a0803fcc 	andi	r2,r20,255
 284:	100a97fa 	slli	r5,r2,31
 288:	00802034 	movhi	r2,128
 28c:	10bfffc4 	addi	r2,r2,-1
 290:	2084703a 	and	r2,r4,r2
 294:	10c4b03a 	or	r2,r2,r3
 298:	1144b03a 	or	r2,r2,r5
 29c:	dfc00a17 	ldw	ra,40(sp)
 2a0:	df000917 	ldw	fp,36(sp)
 2a4:	ddc00817 	ldw	r23,32(sp)
 2a8:	dd800717 	ldw	r22,28(sp)
 2ac:	dd400617 	ldw	r21,24(sp)
 2b0:	dd000517 	ldw	r20,20(sp)
 2b4:	dcc00417 	ldw	r19,16(sp)
 2b8:	dc800317 	ldw	r18,12(sp)
 2bc:	dc400217 	ldw	r17,8(sp)
 2c0:	dc000117 	ldw	r16,4(sp)
 2c4:	dec00b04 	addi	sp,sp,44
 2c8:	f800283a 	ret
 2cc:	90000d1e 	bne	r18,zero,304 <__mulsf3+0x1d8>
 2d0:	04400104 	movi	r17,4
 2d4:	05c00044 	movi	r23,1
 2d8:	003faf06 	br	198 <__alt_data_end+0xffff0198>
 2dc:	9806c03a 	cmpne	r3,r19,zero
 2e0:	18c00084 	addi	r3,r3,2
 2e4:	003fba06 	br	1d0 <__alt_data_end+0xffff01d0>
 2e8:	9800141e 	bne	r19,zero,33c <__mulsf3+0x210>
 2ec:	00c00044 	movi	r3,1
 2f0:	003fb706 	br	1d0 <__alt_data_end+0xffff01d0>
 2f4:	a829883a 	mov	r20,r21
 2f8:	00ffffc4 	movi	r3,-1
 2fc:	0009883a 	mov	r4,zero
 300:	003fdd06 	br	278 <__alt_data_end+0xffff0278>
 304:	9009883a 	mov	r4,r18
 308:	d9400015 	stw	r5,0(sp)
 30c:	00005cc0 	call	5cc <__clzsi2>
 310:	10fffec4 	addi	r3,r2,-5
 314:	10801d84 	addi	r2,r2,118
 318:	90e4983a 	sll	r18,r18,r3
 31c:	00a1c83a 	sub	r16,zero,r2
 320:	0023883a 	mov	r17,zero
 324:	002f883a 	mov	r23,zero
 328:	d9400017 	ldw	r5,0(sp)
 32c:	003f9a06 	br	198 <__alt_data_end+0xffff0198>
 330:	04400304 	movi	r17,12
 334:	05c000c4 	movi	r23,3
 338:	003f9706 	br	198 <__alt_data_end+0xffff0198>
 33c:	9809883a 	mov	r4,r19
 340:	d9800015 	stw	r6,0(sp)
 344:	00005cc0 	call	5cc <__clzsi2>
 348:	10fffec4 	addi	r3,r2,-5
 34c:	10801d84 	addi	r2,r2,118
 350:	98e6983a 	sll	r19,r19,r3
 354:	0085c83a 	sub	r2,zero,r2
 358:	0007883a 	mov	r3,zero
 35c:	d9800017 	ldw	r6,0(sp)
 360:	003f9b06 	br	1d0 <__alt_data_end+0xffff01d0>
 364:	01002034 	movhi	r4,128
 368:	0029883a 	mov	r20,zero
 36c:	213fffc4 	addi	r4,r4,-1
 370:	00ffffc4 	movi	r3,-1
 374:	003fc006 	br	278 <__alt_data_end+0xffff0278>
 378:	9027883a 	mov	r19,r18
 37c:	b807883a 	mov	r3,r23
 380:	003fb406 	br	254 <__alt_data_end+0xffff0254>
 384:	9027883a 	mov	r19,r18
 388:	e02b883a 	mov	r21,fp
 38c:	b807883a 	mov	r3,r23
 390:	003fb006 	br	254 <__alt_data_end+0xffff0254>
 394:	9028d43a 	srli	r20,r18,16
 398:	982cd43a 	srli	r22,r19,16
 39c:	94bfffcc 	andi	r18,r18,65535
 3a0:	9cffffcc 	andi	r19,r19,65535
 3a4:	980b883a 	mov	r5,r19
 3a8:	9009883a 	mov	r4,r18
 3ac:	d9c00015 	stw	r7,0(sp)
 3b0:	00006300 	call	630 <__mulsi3>
 3b4:	a00b883a 	mov	r5,r20
 3b8:	9809883a 	mov	r4,r19
 3bc:	1023883a 	mov	r17,r2
 3c0:	00006300 	call	630 <__mulsi3>
 3c4:	a009883a 	mov	r4,r20
 3c8:	b00b883a 	mov	r5,r22
 3cc:	1027883a 	mov	r19,r2
 3d0:	00006300 	call	630 <__mulsi3>
 3d4:	b00b883a 	mov	r5,r22
 3d8:	9009883a 	mov	r4,r18
 3dc:	1029883a 	mov	r20,r2
 3e0:	00006300 	call	630 <__mulsi3>
 3e4:	8806d43a 	srli	r3,r17,16
 3e8:	14c5883a 	add	r2,r2,r19
 3ec:	d9c00017 	ldw	r7,0(sp)
 3f0:	1885883a 	add	r2,r3,r2
 3f4:	14c0022e 	bgeu	r2,r19,400 <__mulsf3+0x2d4>
 3f8:	00c00074 	movhi	r3,1
 3fc:	a0e9883a 	add	r20,r20,r3
 400:	1026943a 	slli	r19,r2,16
 404:	8c7fffcc 	andi	r17,r17,65535
 408:	1004d43a 	srli	r2,r2,16
 40c:	9c63883a 	add	r17,r19,r17
 410:	882691ba 	slli	r19,r17,6
 414:	1505883a 	add	r2,r2,r20
 418:	8822d6ba 	srli	r17,r17,26
 41c:	100891ba 	slli	r4,r2,6
 420:	9826c03a 	cmpne	r19,r19,zero
 424:	9c62b03a 	or	r17,r19,r17
 428:	8926b03a 	or	r19,r17,r4
 42c:	9882002c 	andhi	r2,r19,2048
 430:	10000426 	beq	r2,zero,444 <__mulsf3+0x318>
 434:	9804d07a 	srli	r2,r19,1
 438:	9900004c 	andi	r4,r19,1
 43c:	3821883a 	mov	r16,r7
 440:	1126b03a 	or	r19,r2,r4
 444:	80c01fc4 	addi	r3,r16,127
 448:	00c0210e 	bge	zero,r3,4d0 <__mulsf3+0x3a4>
 44c:	988001cc 	andi	r2,r19,7
 450:	10000426 	beq	r2,zero,464 <__mulsf3+0x338>
 454:	988003cc 	andi	r2,r19,15
 458:	01000104 	movi	r4,4
 45c:	11000126 	beq	r2,r4,464 <__mulsf3+0x338>
 460:	9927883a 	add	r19,r19,r4
 464:	9882002c 	andhi	r2,r19,2048
 468:	10000426 	beq	r2,zero,47c <__mulsf3+0x350>
 46c:	00be0034 	movhi	r2,63488
 470:	10bfffc4 	addi	r2,r2,-1
 474:	80c02004 	addi	r3,r16,128
 478:	98a6703a 	and	r19,r19,r2
 47c:	00803f84 	movi	r2,254
 480:	10ff9c16 	blt	r2,r3,2f4 <__alt_data_end+0xffff02f4>
 484:	980891ba 	slli	r4,r19,6
 488:	a829883a 	mov	r20,r21
 48c:	2008d27a 	srli	r4,r4,9
 490:	003f7906 	br	278 <__alt_data_end+0xffff0278>
 494:	9080102c 	andhi	r2,r18,64
 498:	10000826 	beq	r2,zero,4bc <__mulsf3+0x390>
 49c:	9880102c 	andhi	r2,r19,64
 4a0:	1000061e 	bne	r2,zero,4bc <__mulsf3+0x390>
 4a4:	00802034 	movhi	r2,128
 4a8:	99001034 	orhi	r4,r19,64
 4ac:	10bfffc4 	addi	r2,r2,-1
 4b0:	b029883a 	mov	r20,r22
 4b4:	2088703a 	and	r4,r4,r2
 4b8:	003fad06 	br	370 <__alt_data_end+0xffff0370>
 4bc:	00802034 	movhi	r2,128
 4c0:	91001034 	orhi	r4,r18,64
 4c4:	10bfffc4 	addi	r2,r2,-1
 4c8:	2088703a 	and	r4,r4,r2
 4cc:	003fa806 	br	370 <__alt_data_end+0xffff0370>
 4d0:	00800044 	movi	r2,1
 4d4:	10c7c83a 	sub	r3,r2,r3
 4d8:	008006c4 	movi	r2,27
 4dc:	10ff6316 	blt	r2,r3,26c <__alt_data_end+0xffff026c>
 4e0:	00800804 	movi	r2,32
 4e4:	10c5c83a 	sub	r2,r2,r3
 4e8:	9884983a 	sll	r2,r19,r2
 4ec:	98c6d83a 	srl	r3,r19,r3
 4f0:	1004c03a 	cmpne	r2,r2,zero
 4f4:	1884b03a 	or	r2,r3,r2
 4f8:	10c001cc 	andi	r3,r2,7
 4fc:	18000426 	beq	r3,zero,510 <__mulsf3+0x3e4>
 500:	10c003cc 	andi	r3,r2,15
 504:	01000104 	movi	r4,4
 508:	19000126 	beq	r3,r4,510 <__mulsf3+0x3e4>
 50c:	1105883a 	add	r2,r2,r4
 510:	10c1002c 	andhi	r3,r2,1024
 514:	18000626 	beq	r3,zero,530 <__mulsf3+0x404>
 518:	a829883a 	mov	r20,r21
 51c:	00c00044 	movi	r3,1
 520:	0009883a 	mov	r4,zero
 524:	003f5406 	br	278 <__alt_data_end+0xffff0278>
 528:	3821883a 	mov	r16,r7
 52c:	003fc506 	br	444 <__alt_data_end+0xffff0444>
 530:	100491ba 	slli	r2,r2,6
 534:	a829883a 	mov	r20,r21
 538:	0007883a 	mov	r3,zero
 53c:	1008d27a 	srli	r4,r2,9
 540:	003f4d06 	br	278 <__alt_data_end+0xffff0278>
 544:	00802034 	movhi	r2,128
 548:	99001034 	orhi	r4,r19,64
 54c:	10bfffc4 	addi	r2,r2,-1
 550:	a829883a 	mov	r20,r21
 554:	2088703a 	and	r4,r4,r2
 558:	003f8506 	br	370 <__alt_data_end+0xffff0370>

0000055c <__fixsfsi>:
 55c:	200ad5fa 	srli	r5,r4,23
 560:	00c02034 	movhi	r3,128
 564:	18ffffc4 	addi	r3,r3,-1
 568:	29403fcc 	andi	r5,r5,255
 56c:	00801f84 	movi	r2,126
 570:	1906703a 	and	r3,r3,r4
 574:	2008d7fa 	srli	r4,r4,31
 578:	11400e0e 	bge	r2,r5,5b4 <__fixsfsi+0x58>
 57c:	00802744 	movi	r2,157
 580:	11400816 	blt	r2,r5,5a4 <__fixsfsi+0x48>
 584:	00802544 	movi	r2,149
 588:	18c02034 	orhi	r3,r3,128
 58c:	11400b0e 	bge	r2,r5,5bc <__fixsfsi+0x60>
 590:	28bfda84 	addi	r2,r5,-150
 594:	1884983a 	sll	r2,r3,r2
 598:	20000726 	beq	r4,zero,5b8 <__fixsfsi+0x5c>
 59c:	0085c83a 	sub	r2,zero,r2
 5a0:	f800283a 	ret
 5a4:	00a00034 	movhi	r2,32768
 5a8:	10bfffc4 	addi	r2,r2,-1
 5ac:	2085883a 	add	r2,r4,r2
 5b0:	f800283a 	ret
 5b4:	0005883a 	mov	r2,zero
 5b8:	f800283a 	ret
 5bc:	00802584 	movi	r2,150
 5c0:	1145c83a 	sub	r2,r2,r5
 5c4:	1884d83a 	srl	r2,r3,r2
 5c8:	003ff306 	br	598 <__alt_data_end+0xffff0598>

000005cc <__clzsi2>:
 5cc:	00bfffd4 	movui	r2,65535
 5d0:	11000536 	bltu	r2,r4,5e8 <__clzsi2+0x1c>
 5d4:	00803fc4 	movi	r2,255
 5d8:	11000f36 	bltu	r2,r4,618 <__clzsi2+0x4c>
 5dc:	00800804 	movi	r2,32
 5e0:	0007883a 	mov	r3,zero
 5e4:	00000506 	br	5fc <__clzsi2+0x30>
 5e8:	00804034 	movhi	r2,256
 5ec:	10bfffc4 	addi	r2,r2,-1
 5f0:	11000c2e 	bgeu	r2,r4,624 <__clzsi2+0x58>
 5f4:	00800204 	movi	r2,8
 5f8:	00c00604 	movi	r3,24
 5fc:	20c8d83a 	srl	r4,r4,r3
 600:	00c00034 	movhi	r3,0
 604:	18c2a104 	addi	r3,r3,2692
 608:	1909883a 	add	r4,r3,r4
 60c:	20c00003 	ldbu	r3,0(r4)
 610:	10c5c83a 	sub	r2,r2,r3
 614:	f800283a 	ret
 618:	00800604 	movi	r2,24
 61c:	00c00204 	movi	r3,8
 620:	003ff606 	br	5fc <__alt_data_end+0xffff05fc>
 624:	00800404 	movi	r2,16
 628:	1007883a 	mov	r3,r2
 62c:	003ff306 	br	5fc <__alt_data_end+0xffff05fc>

00000630 <__mulsi3>:
 630:	0005883a 	mov	r2,zero
 634:	20000726 	beq	r4,zero,654 <__mulsi3+0x24>
 638:	20c0004c 	andi	r3,r4,1
 63c:	2008d07a 	srli	r4,r4,1
 640:	18000126 	beq	r3,zero,648 <__mulsi3+0x18>
 644:	1145883a 	add	r2,r2,r5
 648:	294b883a 	add	r5,r5,r5
 64c:	203ffa1e 	bne	r4,zero,638 <__alt_data_end+0xffff0638>
 650:	f800283a 	ret
 654:	f800283a 	ret

00000658 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 658:	deffff04 	addi	sp,sp,-4
 65c:	01000034 	movhi	r4,0
 660:	01400034 	movhi	r5,0
 664:	dfc00015 	stw	ra,0(sp)
 668:	2102ec04 	addi	r4,r4,2992
 66c:	29432b04 	addi	r5,r5,3244

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 670:	2140061e 	bne	r4,r5,68c <alt_load+0x34>
 674:	01000034 	movhi	r4,0
 678:	01400034 	movhi	r5,0
 67c:	21000804 	addi	r4,r4,32
 680:	29400804 	addi	r5,r5,32
 684:	2140121e 	bne	r4,r5,6d0 <alt_load+0x78>
 688:	00000b06 	br	6b8 <alt_load+0x60>
 68c:	00c00034 	movhi	r3,0
 690:	18c32b04 	addi	r3,r3,3244
 694:	1907c83a 	sub	r3,r3,r4
 698:	0005883a 	mov	r2,zero
  {
    while( to != end )
 69c:	10fff526 	beq	r2,r3,674 <__alt_data_end+0xffff0674>
    {
      *to++ = *from++;
 6a0:	114f883a 	add	r7,r2,r5
 6a4:	39c00017 	ldw	r7,0(r7)
 6a8:	110d883a 	add	r6,r2,r4
 6ac:	10800104 	addi	r2,r2,4
 6b0:	31c00015 	stw	r7,0(r6)
 6b4:	003ff906 	br	69c <__alt_data_end+0xffff069c>
 6b8:	01000034 	movhi	r4,0
 6bc:	01400034 	movhi	r5,0
 6c0:	2102a104 	addi	r4,r4,2692
 6c4:	2942a104 	addi	r5,r5,2692

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 6c8:	2140101e 	bne	r4,r5,70c <alt_load+0xb4>
 6cc:	00000b06 	br	6fc <alt_load+0xa4>
 6d0:	00c00034 	movhi	r3,0
 6d4:	18c00804 	addi	r3,r3,32
 6d8:	1907c83a 	sub	r3,r3,r4
 6dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 6e0:	10fff526 	beq	r2,r3,6b8 <__alt_data_end+0xffff06b8>
    {
      *to++ = *from++;
 6e4:	114f883a 	add	r7,r2,r5
 6e8:	39c00017 	ldw	r7,0(r7)
 6ec:	110d883a 	add	r6,r2,r4
 6f0:	10800104 	addi	r2,r2,4
 6f4:	31c00015 	stw	r7,0(r6)
 6f8:	003ff906 	br	6e0 <__alt_data_end+0xffff06e0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 6fc:	000084c0 	call	84c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 700:	dfc00017 	ldw	ra,0(sp)
 704:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 708:	00008c41 	jmpi	8c4 <alt_icache_flush_all>
 70c:	00c00034 	movhi	r3,0
 710:	18c2ec04 	addi	r3,r3,2992
 714:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 718:	0005883a 	mov	r2,zero
  {
    while( to != end )
 71c:	18bff726 	beq	r3,r2,6fc <__alt_data_end+0xffff06fc>
    {
      *to++ = *from++;
 720:	114f883a 	add	r7,r2,r5
 724:	39c00017 	ldw	r7,0(r7)
 728:	110d883a 	add	r6,r2,r4
 72c:	10800104 	addi	r2,r2,4
 730:	31c00015 	stw	r7,0(r6)
 734:	003ff906 	br	71c <__alt_data_end+0xffff071c>

00000738 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 738:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 73c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 740:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 744:	00007680 	call	768 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 748:	00007880 	call	788 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 74c:	d1a04617 	ldw	r6,-32488(gp)
 750:	d1604717 	ldw	r5,-32484(gp)
 754:	d1204817 	ldw	r4,-32480(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 758:	dfc00017 	ldw	ra,0(sp)
 75c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 760:	000005c1 	jmpi	5c <main>

00000764 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 764:	00007c41 	jmpi	7c4 <alt_busy_sleep>

00000768 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 768:	deffff04 	addi	sp,sp,-4
 76c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_II, NIOS_II);
 770:	00008c80 	call	8c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 774:	00800044 	movi	r2,1
 778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 77c:	dfc00017 	ldw	ra,0(sp)
 780:	dec00104 	addi	sp,sp,4
 784:	f800283a 	ret

00000788 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 788:	defffe04 	addi	sp,sp,-8
 78c:	dc000015 	stw	r16,0(sp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 790:	01000034 	movhi	r4,0
 794:	d4200204 	addi	r16,gp,-32760
 798:	800b883a 	mov	r5,r16
 79c:	21030204 	addi	r4,r4,3080
 7a0:	dfc00115 	stw	ra,4(sp)
 7a4:	00008580 	call	858 <alt_dev_llist_insert>
 7a8:	01000034 	movhi	r4,0
 7ac:	800b883a 	mov	r5,r16
 7b0:	2102f604 	addi	r4,r4,3032
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_JTAG_UART_INIT ( UART, UART);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_CONFIG, AUDIO_CONFIG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, AUDIO);
}
 7b4:	dfc00117 	ldw	ra,4(sp)
 7b8:	dc000017 	ldw	r16,0(sp)
 7bc:	dec00204 	addi	sp,sp,8
 7c0:	00008581 	jmpi	858 <alt_dev_llist_insert>

000007c4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 7c4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 7c8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 7cc:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 7d0:	dc000015 	stw	r16,0(sp)
 7d4:	dfc00115 	stw	ra,4(sp)
 7d8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 7dc:	00009c80 	call	9c8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 7e0:	10001026 	beq	r2,zero,824 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 7e4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 7e8:	013999b4 	movhi	r4,58982
 7ec:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 7f0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 7f4:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 7f8:	297fffc4 	addi	r5,r5,-1
 7fc:	283ffe1e 	bne	r5,zero,7f8 <__alt_data_end+0xffff07f8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 804:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 808:	18bffb16 	blt	r3,r2,7f8 <__alt_data_end+0xffff07f8>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80c:	01400144 	movi	r5,5
 810:	8009883a 	mov	r4,r16
 814:	00006300 	call	630 <__mulsi3>
 818:	10bfffc4 	addi	r2,r2,-1
 81c:	103ffe1e 	bne	r2,zero,818 <__alt_data_end+0xffff0818>
 820:	00000506 	br	838 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 824:	01400144 	movi	r5,5
 828:	8009883a 	mov	r4,r16
 82c:	00006300 	call	630 <__mulsi3>
 830:	10bfffc4 	addi	r2,r2,-1
 834:	00bffe16 	blt	zero,r2,830 <__alt_data_end+0xffff0830>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 838:	0005883a 	mov	r2,zero
 83c:	dfc00117 	ldw	ra,4(sp)
 840:	dc000017 	ldw	r16,0(sp)
 844:	dec00204 	addi	sp,sp,8
 848:	f800283a 	ret

0000084c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 84c:	f800283a 	ret

00000850 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 850:	3005883a 	mov	r2,r6
 854:	f800283a 	ret

00000858 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 858:	20000226 	beq	r4,zero,864 <alt_dev_llist_insert+0xc>
 85c:	20800217 	ldw	r2,8(r4)
 860:	1000101e 	bne	r2,zero,8a4 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 864:	d0a00617 	ldw	r2,-32744(gp)
 868:	10000926 	beq	r2,zero,890 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 86c:	deffff04 	addi	sp,sp,-4
 870:	dfc00015 	stw	ra,0(sp)
 874:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 878:	00c00584 	movi	r3,22
 87c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 880:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 884:	dfc00017 	ldw	ra,0(sp)
 888:	dec00104 	addi	sp,sp,4
 88c:	f800283a 	ret
 890:	d0a04904 	addi	r2,gp,-32476
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 894:	00c00584 	movi	r3,22
 898:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 89c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 8a0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 8a4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8a8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 8ac:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 8b0:	28800017 	ldw	r2,0(r5)
 8b4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 8b8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 8bc:	0005883a 	mov	r2,zero
 8c0:	f800283a 	ret

000008c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8c4:	f800283a 	ret

000008c8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8c8:	000170fa 	wrctl	ienable,zero
 8cc:	f800283a 	ret

000008d0 <__divsi3>:
 8d0:	20001b16 	blt	r4,zero,940 <__divsi3+0x70>
 8d4:	000f883a 	mov	r7,zero
 8d8:	28001616 	blt	r5,zero,934 <__divsi3+0x64>
 8dc:	200d883a 	mov	r6,r4
 8e0:	29001a2e 	bgeu	r5,r4,94c <__divsi3+0x7c>
 8e4:	00800804 	movi	r2,32
 8e8:	00c00044 	movi	r3,1
 8ec:	00000106 	br	8f4 <__divsi3+0x24>
 8f0:	10000d26 	beq	r2,zero,928 <__divsi3+0x58>
 8f4:	294b883a 	add	r5,r5,r5
 8f8:	10bfffc4 	addi	r2,r2,-1
 8fc:	18c7883a 	add	r3,r3,r3
 900:	293ffb36 	bltu	r5,r4,8f0 <__alt_data_end+0xffff08f0>
 904:	0005883a 	mov	r2,zero
 908:	18000726 	beq	r3,zero,928 <__divsi3+0x58>
 90c:	0005883a 	mov	r2,zero
 910:	31400236 	bltu	r6,r5,91c <__divsi3+0x4c>
 914:	314dc83a 	sub	r6,r6,r5
 918:	10c4b03a 	or	r2,r2,r3
 91c:	1806d07a 	srli	r3,r3,1
 920:	280ad07a 	srli	r5,r5,1
 924:	183ffa1e 	bne	r3,zero,910 <__alt_data_end+0xffff0910>
 928:	38000126 	beq	r7,zero,930 <__divsi3+0x60>
 92c:	0085c83a 	sub	r2,zero,r2
 930:	f800283a 	ret
 934:	014bc83a 	sub	r5,zero,r5
 938:	39c0005c 	xori	r7,r7,1
 93c:	003fe706 	br	8dc <__alt_data_end+0xffff08dc>
 940:	0109c83a 	sub	r4,zero,r4
 944:	01c00044 	movi	r7,1
 948:	003fe306 	br	8d8 <__alt_data_end+0xffff08d8>
 94c:	00c00044 	movi	r3,1
 950:	003fee06 	br	90c <__alt_data_end+0xffff090c>

00000954 <__modsi3>:
 954:	20001716 	blt	r4,zero,9b4 <__modsi3+0x60>
 958:	000f883a 	mov	r7,zero
 95c:	2005883a 	mov	r2,r4
 960:	28001216 	blt	r5,zero,9ac <__modsi3+0x58>
 964:	2900162e 	bgeu	r5,r4,9c0 <__modsi3+0x6c>
 968:	01800804 	movi	r6,32
 96c:	00c00044 	movi	r3,1
 970:	00000106 	br	978 <__modsi3+0x24>
 974:	30000a26 	beq	r6,zero,9a0 <__modsi3+0x4c>
 978:	294b883a 	add	r5,r5,r5
 97c:	31bfffc4 	addi	r6,r6,-1
 980:	18c7883a 	add	r3,r3,r3
 984:	293ffb36 	bltu	r5,r4,974 <__alt_data_end+0xffff0974>
 988:	18000526 	beq	r3,zero,9a0 <__modsi3+0x4c>
 98c:	1806d07a 	srli	r3,r3,1
 990:	11400136 	bltu	r2,r5,998 <__modsi3+0x44>
 994:	1145c83a 	sub	r2,r2,r5
 998:	280ad07a 	srli	r5,r5,1
 99c:	183ffb1e 	bne	r3,zero,98c <__alt_data_end+0xffff098c>
 9a0:	38000126 	beq	r7,zero,9a8 <__modsi3+0x54>
 9a4:	0085c83a 	sub	r2,zero,r2
 9a8:	f800283a 	ret
 9ac:	014bc83a 	sub	r5,zero,r5
 9b0:	003fec06 	br	964 <__alt_data_end+0xffff0964>
 9b4:	0109c83a 	sub	r4,zero,r4
 9b8:	01c00044 	movi	r7,1
 9bc:	003fe706 	br	95c <__alt_data_end+0xffff095c>
 9c0:	00c00044 	movi	r3,1
 9c4:	003ff106 	br	98c <__alt_data_end+0xffff098c>

000009c8 <__udivsi3>:
 9c8:	200d883a 	mov	r6,r4
 9cc:	2900152e 	bgeu	r5,r4,a24 <__udivsi3+0x5c>
 9d0:	28001416 	blt	r5,zero,a24 <__udivsi3+0x5c>
 9d4:	00800804 	movi	r2,32
 9d8:	00c00044 	movi	r3,1
 9dc:	00000206 	br	9e8 <__udivsi3+0x20>
 9e0:	10000e26 	beq	r2,zero,a1c <__udivsi3+0x54>
 9e4:	28000516 	blt	r5,zero,9fc <__udivsi3+0x34>
 9e8:	294b883a 	add	r5,r5,r5
 9ec:	10bfffc4 	addi	r2,r2,-1
 9f0:	18c7883a 	add	r3,r3,r3
 9f4:	293ffa36 	bltu	r5,r4,9e0 <__alt_data_end+0xffff09e0>
 9f8:	18000826 	beq	r3,zero,a1c <__udivsi3+0x54>
 9fc:	0005883a 	mov	r2,zero
 a00:	31400236 	bltu	r6,r5,a0c <__udivsi3+0x44>
 a04:	314dc83a 	sub	r6,r6,r5
 a08:	10c4b03a 	or	r2,r2,r3
 a0c:	1806d07a 	srli	r3,r3,1
 a10:	280ad07a 	srli	r5,r5,1
 a14:	183ffa1e 	bne	r3,zero,a00 <__alt_data_end+0xffff0a00>
 a18:	f800283a 	ret
 a1c:	0005883a 	mov	r2,zero
 a20:	f800283a 	ret
 a24:	00c00044 	movi	r3,1
 a28:	003ff406 	br	9fc <__alt_data_end+0xffff09fc>

00000a2c <__umodsi3>:
 a2c:	2005883a 	mov	r2,r4
 a30:	2900122e 	bgeu	r5,r4,a7c <__umodsi3+0x50>
 a34:	28001116 	blt	r5,zero,a7c <__umodsi3+0x50>
 a38:	01800804 	movi	r6,32
 a3c:	00c00044 	movi	r3,1
 a40:	00000206 	br	a4c <__umodsi3+0x20>
 a44:	30000c26 	beq	r6,zero,a78 <__umodsi3+0x4c>
 a48:	28000516 	blt	r5,zero,a60 <__umodsi3+0x34>
 a4c:	294b883a 	add	r5,r5,r5
 a50:	31bfffc4 	addi	r6,r6,-1
 a54:	18c7883a 	add	r3,r3,r3
 a58:	293ffa36 	bltu	r5,r4,a44 <__alt_data_end+0xffff0a44>
 a5c:	18000626 	beq	r3,zero,a78 <__umodsi3+0x4c>
 a60:	1806d07a 	srli	r3,r3,1
 a64:	11400136 	bltu	r2,r5,a6c <__umodsi3+0x40>
 a68:	1145c83a 	sub	r2,r2,r5
 a6c:	280ad07a 	srli	r5,r5,1
 a70:	183ffb1e 	bne	r3,zero,a60 <__alt_data_end+0xffff0a60>
 a74:	f800283a 	ret
 a78:	f800283a 	ret
 a7c:	00c00044 	movi	r3,1
 a80:	003ff706 	br	a60 <__alt_data_end+0xffff0a60>
