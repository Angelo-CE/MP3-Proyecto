
reloj_proyecto.elf:     file format elf32-littlenios2
reloj_proyecto.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000288 memsz 0x00000288 flags r-x
    LOAD off    0x00002000 vaddr 0x00040000 paddr 0x000002a8 align 2**12
         filesz 0x00000100 memsz 0x00000110 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00002100  2**0
                  CONTENTS
  2 .text         00000288  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  00040000  000002a8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000d4  0004002c  000002d4  0000202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00040100  000003a8  00002100  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000003a8  000003a8  00002100  2**0
                  CONTENTS
  7 .SHARED_RAM   00000000  00040110  00040110  00002100  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000178  00000000  00000000  00002128  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001386  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000007c7  00000000  00000000  00003626  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000879  00000000  00000000  00003ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000174  00000000  00000000  00004668  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000008d4  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000000f1  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000051a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e8  00000000  00000000  000051b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000614a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000007  00000000  00000000  0000614d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00006154  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00006155  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00006156  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0000615a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000615e  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00006162  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  0000616b  2**0
                  CONTENTS, READONLY
 27 .jdi          00004753  00000000  00000000  0000619f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     002adcb9  00000000  00000000  0000a8f2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00040000 l    d  .rodata	00000000 .rodata
0004002c l    d  .rwdata	00000000 .rwdata
00040100 l    d  .bss	00000000 .bss
000003a8 l    d  .RAM	00000000 .RAM
00040110 l    d  .SHARED_RAM	00000000 .SHARED_RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../reloj_proyecto_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004005c l     O .rwdata	00000030 AUDIO_CONFIG
0004002c l     O .rwdata	00000030 AUDIO
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000228 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
0000019c g     F .text	0000002c alt_main
000002d4 g       *ABS*	00000000 __flash_rwdata_start
000400e4 g     O .rwdata	00000004 UART
000002a0 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0004010c g     O .bss	00000004 errno
00040104 g     O .bss	00000004 alt_argv
000480e4 g       *ABS*	00000000 _gp
0004008c g     O .rwdata	00000030 alt_fd_list
000400e8 g     O .rwdata	00000004 alt_max_fd
00040110 g       *ABS*	00000000 __bss_end
000400bc g     O .rwdata	00000028 alt_dev_null
00000224 g     F .text	00000004 alt_dcache_flush_all
00040100 g       *ABS*	00000000 __ram_rwdata_end
000400ec g     O .rwdata	00000008 alt_dev_list
0004002c g       *ABS*	00000000 __ram_rodata_end
00040110 g       *ABS*	00000000 end
00050000 g       *ABS*	00000000 __alt_stack_pointer
00000020 g     F .text	0000003c _start
000001e8 g     F .text	0000003c alt_sys_init
0004002c g       *ABS*	00000000 __ram_rwdata_start
00040000 g       *ABS*	00000000 __ram_rodata_start
00040110 g       *ABS*	00000000 __alt_stack_base
00000230 g     F .text	0000006c alt_dev_llist_insert
00040100 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000060 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00040100 g     O .bss	00000004 alt_envp
000400fc g     O .rwdata	00000004 alt_errno
000002a8 g       *ABS*	00000000 __flash_rodata_start
000001c8 g     F .text	00000020 alt_irq_init
00040108 g     O .bss	00000004 alt_argc
000400f4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00040100 g       *ABS*	00000000 _edata
00040110 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00050000 g       *ABS*	00000000 __alt_data_end
00040000 g       *ABS*	00000000 __alt_mem_SHARED_RAM
0000000c g       .entry	00000000 _exit
0000029c g     F .text	00000004 alt_icache_flush_all
000000bc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  28:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
  2c:	d6a03914 	ori	gp,gp,32996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
  34:	10804014 	ori	r2,r2,256

    movhi r3, %hi(__bss_end)
  38:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
  3c:	18c04414 	ori	r3,r3,272

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <__alt_data_end+0xfffb0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000bc0 	call	bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	000019c0 	call	19c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <__alt_data_end+0xfffb0058>

0000005c <main>:
    int i;
    int fifospace;

    for (i = 0; i < 48000; i++) {
        do {
            fifospace = audio_ptr[REG_FIFO_SPACE];
  5c:	01c00074 	movhi	r7,1
        } while ((fifospace & 0x00FF0000) == 0 || (fifospace & 0xFF000000) == 0);

        int16_t sample = ram_ptr[i];
        audio_ptr[REG_LEFTDATA] = sample;
  60:	01800074 	movhi	r6,1
        audio_ptr[REG_RIGHTDATA] = sample;
  64:	01400074 	movhi	r5,1
    volatile int16_t* ram_ptr = (int16_t*)RAM_SHARED_BASE;

    int i;
    int fifospace;

    for (i = 0; i < 48000; i++) {
  68:	01000174 	movhi	r4,5
#define REG_CONTROL      0
#define REG_FIFO_SPACE   1
#define REG_LEFTDATA     2
#define REG_RIGHTDATA    3

int main() {
  6c:	00800134 	movhi	r2,4
    int i;
    int fifospace;

    for (i = 0; i < 48000; i++) {
        do {
            fifospace = audio_ptr[REG_FIFO_SPACE];
  70:	39c41404 	addi	r7,r7,4176
        } while ((fifospace & 0x00FF0000) == 0 || (fifospace & 0xFF000000) == 0);

        int16_t sample = ram_ptr[i];
        audio_ptr[REG_LEFTDATA] = sample;
  74:	31841604 	addi	r6,r6,4184
        audio_ptr[REG_RIGHTDATA] = sample;
  78:	29441704 	addi	r5,r5,4188
    volatile int16_t* ram_ptr = (int16_t*)RAM_SHARED_BASE;

    int i;
    int fifospace;

    for (i = 0; i < 48000; i++) {
  7c:	211dc004 	addi	r4,r4,30464
        do {
            fifospace = audio_ptr[REG_FIFO_SPACE];
  80:	38c00117 	ldw	r3,4(r7)
        } while ((fifospace & 0x00FF0000) == 0 || (fifospace & 0xFF000000) == 0);
  84:	1a003fec 	andhi	r8,r3,255
  88:	403ffd26 	beq	r8,zero,80 <__alt_data_end+0xfffb0080>
  8c:	18ffc02c 	andhi	r3,r3,65280
  90:	183ffb26 	beq	r3,zero,80 <__alt_data_end+0xfffb0080>

        int16_t sample = ram_ptr[i];
  94:	10c0000b 	ldhu	r3,0(r2)
  98:	10800084 	addi	r2,r2,2
        audio_ptr[REG_LEFTDATA] = sample;
  9c:	18ffffcc 	andi	r3,r3,65535
  a0:	18e0001c 	xori	r3,r3,32768
  a4:	18e00004 	addi	r3,r3,-32768
  a8:	30c00015 	stw	r3,0(r6)
        audio_ptr[REG_RIGHTDATA] = sample;
  ac:	28c00015 	stw	r3,0(r5)
    volatile int16_t* ram_ptr = (int16_t*)RAM_SHARED_BASE;

    int i;
    int fifospace;

    for (i = 0; i < 48000; i++) {
  b0:	113ff31e 	bne	r2,r4,80 <__alt_data_end+0xfffb0080>
        audio_ptr[REG_LEFTDATA] = sample;
        audio_ptr[REG_RIGHTDATA] = sample;
    }

    return 0;
}
  b4:	0005883a 	mov	r2,zero
  b8:	f800283a 	ret

000000bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  bc:	deffff04 	addi	sp,sp,-4
  c0:	01000134 	movhi	r4,4
  c4:	01400034 	movhi	r5,0
  c8:	dfc00015 	stw	ra,0(sp)
  cc:	21000b04 	addi	r4,r4,44
  d0:	2940b504 	addi	r5,r5,724

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  d4:	2140061e 	bne	r4,r5,f0 <alt_load+0x34>
  d8:	01000034 	movhi	r4,0
  dc:	01400034 	movhi	r5,0
  e0:	21000804 	addi	r4,r4,32
  e4:	29400804 	addi	r5,r5,32
  e8:	2140121e 	bne	r4,r5,134 <alt_load+0x78>
  ec:	00000b06 	br	11c <alt_load+0x60>
  f0:	00c00134 	movhi	r3,4
  f4:	18c04004 	addi	r3,r3,256
  f8:	1907c83a 	sub	r3,r3,r4
  fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 100:	10fff526 	beq	r2,r3,d8 <__alt_data_end+0xfffb00d8>
    {
      *to++ = *from++;
 104:	114f883a 	add	r7,r2,r5
 108:	39c00017 	ldw	r7,0(r7)
 10c:	110d883a 	add	r6,r2,r4
 110:	10800104 	addi	r2,r2,4
 114:	31c00015 	stw	r7,0(r6)
 118:	003ff906 	br	100 <__alt_data_end+0xfffb0100>
 11c:	01000134 	movhi	r4,4
 120:	01400034 	movhi	r5,0
 124:	21000004 	addi	r4,r4,0
 128:	2940aa04 	addi	r5,r5,680

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 12c:	2140101e 	bne	r4,r5,170 <alt_load+0xb4>
 130:	00000b06 	br	160 <alt_load+0xa4>
 134:	00c00034 	movhi	r3,0
 138:	18c00804 	addi	r3,r3,32
 13c:	1907c83a 	sub	r3,r3,r4
 140:	0005883a 	mov	r2,zero
  {
    while( to != end )
 144:	10fff526 	beq	r2,r3,11c <__alt_data_end+0xfffb011c>
    {
      *to++ = *from++;
 148:	114f883a 	add	r7,r2,r5
 14c:	39c00017 	ldw	r7,0(r7)
 150:	110d883a 	add	r6,r2,r4
 154:	10800104 	addi	r2,r2,4
 158:	31c00015 	stw	r7,0(r6)
 15c:	003ff906 	br	144 <__alt_data_end+0xfffb0144>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 160:	00002240 	call	224 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 164:	dfc00017 	ldw	ra,0(sp)
 168:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 16c:	000029c1 	jmpi	29c <alt_icache_flush_all>
 170:	00c00134 	movhi	r3,4
 174:	18c00b04 	addi	r3,r3,44
 178:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 17c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 180:	18bff726 	beq	r3,r2,160 <__alt_data_end+0xfffb0160>
    {
      *to++ = *from++;
 184:	114f883a 	add	r7,r2,r5
 188:	39c00017 	ldw	r7,0(r7)
 18c:	110d883a 	add	r6,r2,r4
 190:	10800104 	addi	r2,r2,4
 194:	31c00015 	stw	r7,0(r6)
 198:	003ff906 	br	180 <__alt_data_end+0xfffb0180>

0000019c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 19c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1a0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1a4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1a8:	00001c80 	call	1c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1ac:	00001e80 	call	1e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1b0:	d1a00717 	ldw	r6,-32740(gp)
 1b4:	d1600817 	ldw	r5,-32736(gp)
 1b8:	d1200917 	ldw	r4,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1bc:	dfc00017 	ldw	ra,0(sp)
 1c0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1c4:	000005c1 	jmpi	5c <main>

000001c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1c8:	deffff04 	addi	sp,sp,-4
 1cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_II, NIOS_II);
 1d0:	00002a00 	call	2a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1d4:	00800044 	movi	r2,1
 1d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1dc:	dfc00017 	ldw	ra,0(sp)
 1e0:	dec00104 	addi	sp,sp,4
 1e4:	f800283a 	ret

000001e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1e8:	defffe04 	addi	sp,sp,-8
 1ec:	dc000015 	stw	r16,0(sp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1f0:	01000134 	movhi	r4,4
 1f4:	d4200204 	addi	r16,gp,-32760
 1f8:	800b883a 	mov	r5,r16
 1fc:	21001704 	addi	r4,r4,92
 200:	dfc00115 	stw	ra,4(sp)
 204:	00002300 	call	230 <alt_dev_llist_insert>
 208:	01000134 	movhi	r4,4
 20c:	800b883a 	mov	r5,r16
 210:	21000b04 	addi	r4,r4,44
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_JTAG_UART_INIT ( UART, UART);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_CONFIG, AUDIO_CONFIG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, AUDIO);
}
 214:	dfc00117 	ldw	ra,4(sp)
 218:	dc000017 	ldw	r16,0(sp)
 21c:	dec00204 	addi	sp,sp,8
 220:	00002301 	jmpi	230 <alt_dev_llist_insert>

00000224 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 224:	f800283a 	ret

00000228 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 228:	3005883a 	mov	r2,r6
 22c:	f800283a 	ret

00000230 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 230:	20000226 	beq	r4,zero,23c <alt_dev_llist_insert+0xc>
 234:	20800217 	ldw	r2,8(r4)
 238:	1000101e 	bne	r2,zero,27c <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 23c:	d0a00617 	ldw	r2,-32744(gp)
 240:	10000926 	beq	r2,zero,268 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 244:	deffff04 	addi	sp,sp,-4
 248:	dfc00015 	stw	ra,0(sp)
 24c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 250:	00c00584 	movi	r3,22
 254:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 258:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 25c:	dfc00017 	ldw	ra,0(sp)
 260:	dec00104 	addi	sp,sp,4
 264:	f800283a 	ret
 268:	d0a00a04 	addi	r2,gp,-32728
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 26c:	00c00584 	movi	r3,22
 270:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 274:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 278:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 27c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 280:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 284:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 288:	28800017 	ldw	r2,0(r5)
 28c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 290:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 294:	0005883a 	mov	r2,zero
 298:	f800283a 	ret

0000029c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 29c:	f800283a 	ret

000002a0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 2a0:	000170fa 	wrctl	ienable,zero
 2a4:	f800283a 	ret
